name: Deploy API Node Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: https://index.docker.io/v1/

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-node:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script_stop: true
        debug: true
        port: 22
        script: |
          # Print system info
          uname -a
          docker --version
          
          # Create config directory if it doesn't exist
          mkdir -p /etc/api-node
          
          # Ensure .env file exists and has correct permissions
          if [ ! -f /etc/api-node/.env ]; then
            echo "Creating .env file..."
            cat > /etc/api-node/.env << 'EOL'
            PORT=5001
            DATABASE_URL="postgresql://tds_user:tds_pass@95.215.207.172:5432/tds?schema=public"
            USE_REDIS=true
            REDIS_URL=redis://212.8.244.106:6379
            REDIS_HOST=212.8.244.106
            REDIS_PORT=6379
            REDIS_PASSWORD=tds_pass
            EOL
          fi
          
          # Set correct permissions
          chmod 600 /etc/api-node/.env
          
          # Pull the latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-node:latest
          
          # Stop and remove the old container if it exists
          docker stop api-node || true
          docker rm api-node || true
          
          # Run the new container
          docker run -d \
            --name api-node \
            --restart unless-stopped \
            -p 5001:5001 \
            -v /etc/api-node/.env:/app/.env \
            ${{ secrets.DOCKERHUB_USERNAME }}/api-node:latest
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q api-node; then
            echo "Container failed to start"
            docker logs api-node
            exit 1
          fi
          
          # Verify .env file is mounted correctly
          echo "Checking .env file in container:"
          docker exec api-node ls -l /app/.env
          docker exec api-node cat /app/.env
          
          # Check if application is responding
          echo "Checking application health..."
          if ! curl -s http://localhost:5001/health | grep -q "ok"; then
            echo "Application health check failed"
            echo "Container logs:"
            docker logs api-node
            echo "Environment variables:"
            docker exec api-node env
            exit 1
          fi
          
          echo "Deployment successful!" 